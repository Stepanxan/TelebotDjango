import telebot
from django.http import HttpResponse
from telebot import types
from django.views.decorators.csrf import csrf_exempt
from .conf import bot
from .models import Vertical, Gembling, Project, Upplybutton, WrittenOffBalance, Product, Lk, Transaction

@csrf_exempt
def telegram_webhook(request):
    if request.method == 'POST':
        update = telebot.types.Update.de_json(request.body.decode('utf-8'))
        bot.process_new_updates([update])
        return HttpResponse('')
    return HttpResponse('Invalid request method')


#–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –∑ –∑–∞–∫–ª–∞–¥–µ–Ω–æ—é –ø—Ä–æ–≤—ñ—Ä–∫–æ—é –Ω–∞ —Ç–µ —á–∏ –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è –º–µ–º–±–µ—Ä –Ω–∞ –∫–∞–Ω–∞–ª
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    first_name = message.chat.first_name
    bot.send_message(chat_id, f"–ü—Ä–∏–≤—ñ—Ç {first_name} !/n"
                                f"–ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª", reply_markup=start_markup())
    if start_markup():
        markup = types.ReplyKeyboardMarkup(row_width=1)
        btn_1 = types.KeyboardButton('üî¢ –í–∏–±—ñ—Ä –≤–µ—Ä—Ç–∏–∫–∞–ª—ñ')
        btn_2 = types.KeyboardButton('üë§ –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç')
        markup.row(btn_1, btn_2)
        bot.send_message(chat_id, '–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!', reply_markup=markup)
        bot.register_next_step_handler(message, choose_vertical, choose_main_menu)
    else:
        bot.send_message(chat_id, '–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.')


def start_markup():
    markup = types.InlineKeyboardMarkup(row_width=True)
    link_keyboard = types.InlineKeyboardButton(text="–ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª", url='https://web.telegram.org/a/#-1946488565')
    check_keyboard = types.InlineKeyboardButton(text="–ü—Ä–æ–≤—ñ—Ä–∏—Ç–∏", callback_data="check")
    markup.add(link_keyboard, check_keyboard)
    return markup


def check(call):
    status = ['creator', 'administrator', 'member']
    if bot.get_chat_member(chat_id='-1001946488565', user_id=call.message.chat.id).status in status:
        bot.send_message(call.message.chat.id, "–î—è–∫—É—é –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É!", reply_markup=start_markup())
    else:
        bot.send_message(call.message.chat.id, "–ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª!", reply_markup=start_markup())



#–ö–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É –≤–µ—Ä—Ç–∏–∫–∞–ª—ñ
@bot.message_handler(func=lambda message: message.text == 'üî¢ –í–∏–±—ñ—Ä –≤–µ—Ä—Ç–∏–∫–∞–ª—ñ')
def choose_vertical(message):
    Vertical.choose_vertical(message)


#–ö–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É –õ–ö
@bot.message_handler(func=lambda message: message.text == 'üë§ –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç')
def choose_main_menu(message):
    Lk.choose_main_menu(message)


#–ö–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É –≥–µ–º–±–ª—ñ–Ω–≥–∞
@bot.message_handler(func=lambda message: message.text == 'üé∞ –≥–µ–º–±–ª—ñ–Ω–≥')
def choose_gembling(message):
    Gembling.choose_gempling(message)



#–ö–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É –∫–Ω–æ–ø–æ–∫–∏ –ø—Ä–∏–∫–ª–∞–¥—É —Ä–æ–±–æ—Ç–∏ —ñ –æ–ø–∏—Å—É –ø—Ä–æ–µ–∫—Ç—É
@bot.message_handler(func=lambda message: message.text in ['üî¥ –ª–µ–Ω–¥','üü† –ø—Ä–µ–ª–µ–Ω–¥','üü¢ —Ç–≥ –±–æ—Ç', 'üîµ –∫–∞—Å—Ç–æ–º'])
def choose_project(message):
    Project.choose_project(message)


#–ö–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É –∫–Ω–æ–ø–æ–∫–∏ –æ–ø–ª–∞—Ç–∏
@bot.message_handler(func=lambda message: message.text == 'üíº –ü—Ä–∏–∫–ª–∞–¥ —Ä–æ–±—ñ—Ç —ñ –æ–ø–∏—Å –ø—Ä–æ–µ–∫—Ç—É')
def choose_button(message):
    Upplybutton.choose_button(message)

#–ö–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É –∫–Ω–æ–ø–æ–∫–∏ —Å–ø–∏—Å–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
@bot.message_handler(func=lambda message: message.text == 'üí≥ –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç–∏')
def choose_written_off_balance(message):
    WrittenOffBalance.choose_written_off_balance(message)

#–ö–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É –∫–Ω–æ–ø–æ–∫–∏ –ø—Ä–æ–¥—É–∫—Ç
@bot.message_handler(func=lambda message: message.text == 'üí∏ –°–ø–∏—Å–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É')
def choose_product(message):
    Product.choose_product(message)



# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ " –Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"
@bot.message_handler(func=lambda message: message.text == 'üóÇ –Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π')
def handle_transactions_button(message):
    Lk.handle_transactions_history(message)


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "üõí –ú–æ—ó –ø–æ–∫—É–ø–∫–∏"
@bot.message_handler(func=lambda message: message.text == 'üõí –ú–æ—ó –ø–æ–∫—É–ø–∫–∏')
def handle_my_purchases(message):
    Lk.handle_my_purchases(message)


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "üõí –ú–æ—ó –ø–æ–∫—É–ø–∫–∏"
@bot.message_handler(func=lambda message: message.text == 'üõí –ú–æ—ó –ø–æ–∫—É–ø–∫–∏')
def handle_my_purchases(message):
    chat_id = message.chat.id
    user = UserProfile.objects.get(telegram_id=message.from_user.id)
    purchase_history = get_purchase_history(user)
    if not purchase_history:
        bot.send_message(chat_id, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –ø–æ–∫—É–ø–æ–∫.")
    else:
        purchases_info = "üõçÔ∏è –í–∞—à—ñ –ø–æ–∫—É–ø–∫–∏:\n"
        for purchase in purchase_history:
            purchases_info += f"{purchase}\n"

        bot.send_message(chat_id, purchases_info)

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–°–∞–ø–ø–æ—Ä—Ç"
@bot.message_handler(func=lambda message: message.text == 'üî® –°–∞–ø–ø–æ—Ä—Ç')
def handle_support(message):
    Lk.handle_support_button(message)

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "FAQ"
@bot.message_handler(func=lambda message: message.text == '‚öôÔ∏è FAQ')
def handle_faq_button(message):
    Lk.handle_faq_button(message)


# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –≤–µ—Ä—Ç–∏–∫–∞–ª–µ–π
@bot.message_handler(func=lambda message: message.text in ['üé∞ –≥–µ–º–±–ª—ñ–Ω–≥', '‚öΩÔ∏è –±–µ—Ç—ñ–Ω–≥', 'üßò –Ω—É—Ç—Ä–∞', 'üõí —Ç–æ–≤–∞—Ä–∫–∞', 'üí∞ –∫—Ä–∏–ø—Ç–∞', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
def handle_vertical(message):
    Vertical.handle_vertical(message)


# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫–∏ –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç
@bot.message_handler(func=lambda message: message.text in ['üí∞ –ë–∞–ª–∞–Ω—Å','üí≥ –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è','üóÇ –Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π', 'üõí –ú–æ—ó –ø–æ–∫—É–ø–∫–∏', '‚öôÔ∏è FAQ', 'üî® –°–∞–ø–ø–æ—Ä—Ç', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
def handle_main_menu(message):
    Lk.handle_main_menu(message)


# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –≥–µ–º–±–ª—ñ–Ω–≥–∞
@bot.message_handler(func=lambda message: message.text in ['üî¥ –ª–µ–Ω–¥','üü† –ø—Ä–µ–ª–µ–Ω–¥','üü¢ —Ç–≥ –±–æ—Ç', 'üîµ –∫–∞—Å—Ç–æ–º'])
def handle_gembling(message):
    Gembling.handle_gembling(message)



# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫–∏ –ø—Ä–∏–∫–ª–∞–¥—É —Ä–æ–±–æ—Ç–∏ —ñ –æ–ø–∏—Å—É –ø—Ä–æ–µ–∫—Ç—É
@bot.message_handler(func=lambda message: message.text in ['üíº –ø—Ä–∏–∫–ª–∞–¥ —Ä–æ–±–æ—Ç–∏ —ñ –æ–ø–∏—Å—É –ø—Ä–æ–µ–∫—Ç—É'])
def handle_project(message):
    Project.handle_project(message)


#–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫–∏ –æ–ø–ª–∞—Ç–∏
@bot.message_handler(func=lambda message: message.text in ['üí≥ –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç–∏'])
def handle_button(message):
    Upplybutton.handle_button(message)


#–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
@bot.message_handler(func=lambda message: message.text in ['üí∏ —Å–ø–∏—Å–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É'])
def handle_written_off_balance(message):
    WrittenOffBalance.handle_written_off_balance(message)


#–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç
@bot.message_handler(func=lambda message: message.text in ['–ø—Ä–æ–¥—É–∫—Ç —ñ –≤—Å—ñ –π–æ–≥–æ –∫–æ–º–ø–ª–µ—Ç—É—é—á—ñ —Ä–∞–∑–æ–º –∑ –º–∞–Ω—É–∞–ª–æ–º'])
def handle_product(message):
    Product.handle_product(message)